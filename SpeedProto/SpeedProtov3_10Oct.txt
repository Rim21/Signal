#include <SPI.h> // These are the essential libraries you'll need
#include <Andee.h>

AndeeHelper speedReading;

const int pinSpeed = A1; // Analog Pin A1 connects across LED
float valueVolt; // We'll need these float variables for calculations

int speedA = 255; // ARGB values for Speedvoltage display
int speedR = 0;
int speedG = 0;
int speedB = 0;

char colorA[9]; // Strings to store the ARGB color codes
char colorB[9];

void setup()
{
  Andee.begin(); // Sets up the communication link between Arduino and the Annikken Andee
  setInitialData();
  Andee.clear(); // Clear the screen of any previous displays
} 

void setInitialData()
{
  speedReading.setId(0); // Don't forget to assign unique values to each object
  speedReading.setType(DATA_OUT);
  speedReading.setLocation(0,0,FULL);
  speedReading.setTitle("Voltage measured on Speed signal"); 
  speedReading.setUnit("volts");
  speedReading.setTitleColor(WHITE); // Set title bg to white
  speedReading.setTitleTextColor(TEXT_DARK); // Set title font to black
  speedReading.setColor(BLACK); // Set bg to black

} 

void loop()
{ 
  valueVolt = analogRead(pinSpeed)*5.0/1024; // Store the calculated voltage in a float var
  speedReading.setData(valueVolt,2);
  
  speedB = 255 * (valueVolt/5); // Divide by five to get a range of values from 0 to 1
  speedR = (255/3) * (valueVolt/5); // (255/3) because we don't want the full intensity of red.

  sprintf(colorA, "%02X%02X%02X%02X", speedA, speedR, speedG, speedB);
  speedReading.setColor(colorA); // Change display box to new colour.

  speedReading.update(); // We're finally doing the updating here
  
  delay(500); // Refresh the smartphone screen every 0.5 second. 
}